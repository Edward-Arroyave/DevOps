name: "üö® Validar Commit Actual"

on:
  push:
    branches:
      - dev
      - test
      - demo
      - main
  pull_request:
    types: [opened, synchronize]

jobs:
  validate-commit-message:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    concurrency:
      group: "commit-validation-${{ github.ref }}"
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validar mensaje del commit
        run: |
          # Obtener el mensaje y hash del commit, y la rama
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          COMMIT_HASH=$(git log -1 --pretty=%H)
          AUTHOR_NAME=$(git log -1 --pretty=%an)
          GITHUB_USER=${{ github.actor }}
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          echo "Mensaje del commit: $COMMIT_MESSAGE"
          echo "Commit hash: $COMMIT_HASH"
          echo "Rama actual: $CURRENT_BRANCH"
          
          # Validaci√≥n del formato del commit
          if [[ ! "$COMMIT_MESSAGE" =~ ^\[(add|fix|update|remove|refactor|docs|test|chore|initial commit)\]:\ .*$ ]]; then
            echo "‚ùå El mensaje de commit no sigue el formato requerido."
            
            # Crear un issue si el mensaje no cumple con el formato
            ISSUE_RESPONSE=$(curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{
                    "title": "üö® Commit inv√°lido - Requiere correcci√≥n de formato",
                    "body": "El commit realizado por @'"$AUTHOR_NAME"' no sigue el formato requerido para los mensajes de commit.\n\n**Commit hash**: ['"$COMMIT_HASH"'](https://github.com/${{ github.repository }}/commit/'"$COMMIT_HASH"')\n**Rama actual**: '$CURRENT_BRANCH'\n\n**Encabezado del commit**: '"$COMMIT_MESSAGE"'\n\n**Pasos para corregir el commit**:\n\n1. **Clonar el repositorio (si no lo tienes clonado):**\n   - Si no tienes el repositorio en tu m√°quina local, cl√≥nalo con el siguiente comando:\n     ```\n     git clone https://github.com/${{ github.repository }}.git\n     ```\n\n2. **Actualizar tu repositorio (si ya lo tienes clonado):**\n   - Si ya tienes el repositorio, aseg√∫rate de tener los √∫ltimos cambios ejecutando:\n     ```\n     git pull origin '$CURRENT_BRANCH'\n     ```\n\n3. **Guardar tu trabajo actual:**\n   - Antes de proceder, aseg√∫rate de guardar cualquier cambio no confirmado. Puedes hacer un respaldo creando una rama temporal:\n     ```\n     git checkout -b backup-branch\n     ```\n   - Esto te permitir√° guardar tu trabajo y restaurarlo si algo sale mal.\n\n4. **Moverse al commit previo con el hash:**\n   - Usa el siguiente comando para moverte al commit previo usando el commit hash: `git checkout '$COMMIT_HASH'`\n   - Esto te llevar√° a la versi√≥n exacta del commit anterior.\n\n5. **Modificar el mensaje del commit:**\n   - Modifica el mensaje del commit con el siguiente comando (sin cambiar el contenido del commit):\n     ```\n     git commit --amend --no-edit -m \"[add]: Descripci√≥n del cambio\"\n     ```\n   - Este comando modificar√° solo el mensaje del √∫ltimo commit sin cambiar el contenido.\n\n6. **Revisar el commit modificado:**\n   - Aseg√∫rate de que el commit se modific√≥ correctamente con el siguiente comando:\n     ```\n     git log -1\n     ```\n   - Esto mostrar√° el √∫ltimo commit con el mensaje actualizado.\n\n7. **Subir los cambios al repositorio remoto:**\n   - Una vez que el commit est√© modificado, sube los cambios con el siguiente comando:\n     ```\n     git push --force-with-lease origin '$CURRENT_BRANCH'\n     ```\n   - Usar `--force-with-lease` garantiza que no sobrescribas los cambios de otros colaboradores.\n\n**Por favor, realice la correcci√≥n y haga un nuevo push.**\n\n**Verbos permitidos en el mensaje del commit:**\n\n- **[add]:** Para a√±adir nuevas funcionalidades.\n- **[fix]:** Para solucionar errores.\n- **[update]:** Para actualizar funcionalidades existentes.\n- **[remove]:** Para eliminar funcionalidades.\n- **[refactor]:** Para cambios de c√≥digo que no afectan el comportamiento del sistema (refactorizaci√≥n).\n- **[docs]:** Para cambios relacionados con la documentaci√≥n.\n- **[test]:** Para agregar o modificar pruebas.\n- **[chore]:** Para tareas generales, como la actualizaci√≥n de dependencias, configuraci√≥n del entorno, etc.\n- **[initial commit]:** El primer commit del proyecto.",
                    "labels": ["invalid-commit"]
                  }' \
              https://api.github.com/repos/${{ github.repository }}/issues)
            # Obtener el ID del issue creado
            ISSUE_NUMBER=$(echo "$ISSUE_RESPONSE" | jq '.number')
            
            # Asignar el issue tanto al autor del commit como al administrador
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{
                    "assignees": ["'"$GITHUB_USER"'"]
                  }' \
              https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/assignees
            exit 1
          else
            echo "‚úÖ El mensaje de commit cumple con el formato requerido."
          fi
