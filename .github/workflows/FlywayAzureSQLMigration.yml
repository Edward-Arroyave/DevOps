name: Flyway Azure SQL Migrations

on:
  push:
    branches: [main, test, demo, dev]
  workflow_dispatch:

concurrency:
  group: flyway-migrations-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-migrations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configurar variables de entorno
        run: |
          case "${{ github.ref_name }}" in
            "main")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_PROD }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_PROD }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_PROD }}" >> $GITHUB_ENV
              ;;
            "dev")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_DEV }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_DEV }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_DEV }}" >> $GITHUB_ENV
              ;;
            "demo")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_DEMO }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_DEMO }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_DEMO }}" >> $GITHUB_ENV
              ;;
            "test")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_TEST }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_TEST }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_TEST }}" >> $GITHUB_ENV
              ;;
            *)
              echo "::error::Branch no configurada: ${{ github.ref_name }}"
              exit 1
              ;;
          esac

      - name: Ejecutar migraciones con Flyway
        uses: red-gate/FlywayGithubAction@main
        with:
          url: ${{ env.FLYWAY_URL }}
          user: ${{ env.FLYWAY_USER }}
          password: ${{ env.FLYWAY_PASSWORD }}
          locations: filesystem:./Live_Lis_Flyway/migrations
          extraArgs: -configFiles=./Live_Lis_Flyway/flyway.toml -X

      - name: Crear Issue en GitHub en caso de fallo
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SERVER=$(echo "$FLYWAY_URL" | awk -F'//' '{split($2,a,";"); print a[1]}' | cut -d'.' -f1)
          DATABASE=$(echo "$FLYWAY_URL" | awk -F'databaseName=' '{print $2}' | cut -d';' -f1)
          FAILED_SCRIPT="MigraciÃ³n fallida"
          ERROR_TYPE="ðŸš¨ Error de MigraciÃ³n"
          BODY="## ${ERROR_TYPE} en ${DATABASE}

          **Detalles TÃ©cnicos:**
          â–¸ Entorno: \`${{ github.ref_name }}\`
          â–¸ Servidor SQL: \`${SERVER}.database.windows.net\`
          â–¸ Recurso Fallido: \`${FAILED_SCRIPT}\`
          â–¸ Commit: [\`${GITHUB_SHA:0:7}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"

          gh issue create \
            --title "[${SERVER^^}] ${ERROR_TYPE} - ${FAILED_SCRIPT}" \
            --body "$BODY" \
            --assignee "${{ github.actor }}" \
            --label "flyway"
