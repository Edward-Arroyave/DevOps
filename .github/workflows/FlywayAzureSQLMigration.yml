name: Flyway Azure SQL Migrations

on:
  push:
    branches: [main, test, demo, dev]
  workflow_dispatch:

concurrency:
  group: flyway-migrations-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-migrations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Flyway
        run: |
          FLYWAY_VERSION=11.3.2
          curl -sL https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/$FLYWAY_VERSION/flyway-commandline-$FLYWAY_VERSION-linux-x64.tar.gz -o flyway.tar.gz
          tar -xzf flyway.tar.gz
          echo "$(pwd)/flyway-$FLYWAY_VERSION" >> $GITHUB_PATH

      - name: Set Environment Variables
        run: |
          case "${{ github.ref_name }}" in
            "main")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_PROD }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_PROD }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_PROD }}" >> $GITHUB_ENV
              ;;
            "dev")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_DEV }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_DEV }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_DEV }}" >> $GITHUB_ENV
              ;;
            "demo")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_DEMO }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_DEMO }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_DEMO }}" >> $GITHUB_ENV
              ;;
            "test")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_TEST }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_TEST }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_TEST }}" >> $GITHUB_ENV
              ;;
            *)
              echo "::error::Branch no configurada: ${{ github.ref_name }}"
              exit 1
              ;;
          esac
      - name: Create GitHub Issue on Failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # ... (código de extracción de metadatos igual) ...
          
          # Generar contenido dinámico para el template
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          ERROR_MSG=$(jq -Rs . < flyway_error.log)
          LOGS_CONTENT=$(tail -n 30 flyway_error.log | jq -Rs .)
  
          # Crear issue usando el template con parámetros dinámicos
          gh issue create \
            --title "[${SERVER^^}] Flyway Migration Error - ${FAILED_SCRIPT##*/}" \
            --body-file .github/ISSUE_TEMPLATE/flyway-error.yml \
            --assignee "${{ github.actor }}" \
            --label "flyway,bug,migration-error" \
            -f migration_file="${FAILED_SCRIPT}" \
            -f error_message="${ERROR_MSG}" \
            -f event_trigger="flyway migrate" \
            -f commit_hash="${GITHUB_SHA:0:7}" \
            -f timestamp="${TIMESTAMP}" \
            -f git_actor="${{ github.actor }}" \
            -f logs="${LOGS_CONTENT}" \
            -f additional_info="Entorno: ${{ github.ref_name }}
            Servidor SQL: ${SERVER}.database.windows.net
            Base de Datos: ${DATABASE}"
