name: Flyway Azure SQL Migrations

on:
  push:
    branches: [main, test, demo, dev]
  workflow_dispatch:

concurrency:
  group: flyway-migrations-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-migrations:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Flyway and jq
        run: |
          sudo apt-get install -y jq
          FLYWAY_VERSION=11.3.2
          curl -sL https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/$FLYWAY_VERSION/flyway-commandline-$FLYWAY_VERSION-linux-x64.tar.gz -o flyway.tar.gz
          tar -xzf flyway.tar.gz
          echo "$(pwd)/flyway-$FLYWAY_VERSION" >> $GITHUB_PATH

      - name: Set Environment Variables
        run: |
          case "${{ github.ref_name }}" in
            "main")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_PROD }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_PROD }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_PROD }}" >> $GITHUB_ENV
              ;;
            "dev")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_DEV }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_DEV }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_DEV }}" >> $GITHUB_ENV
              ;;
            "demo")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_DEMO }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_DEMO }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_DEMO }}" >> $GITHUB_ENV
              ;;
            "test")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_TEST }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_TEST }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_TEST }}" >> $GITHUB_ENV
              ;;
            *)
              echo "::error::Branch no configurada: ${{ github.ref_name }}"
              exit 1
              ;;
          esac

      - name: Run Migrations
        run: |
          LOG_FILE="./Live_Lis_Flyway/flyway_$(date +%Y%m%d%H%M%S).log"
          EXIT_CODE=0
          
          flyway migrate \
            -configFiles=./Live_Lis_Flyway/flyway.toml \
            -url="$FLYWAY_URL" \
            -user="$FLYWAY_USER" \
            -password="$FLYWAY_PASSWORD" \
            -X \
            -locations="filesystem:./Live_Lis_Flyway/migrations" \
            -logFile="$LOG_FILE" || EXIT_CODE=$?

          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Error en migración (Código: $EXIT_CODE)"
            if [ -f "$LOG_FILE" ]; then
              tail -n 50 "$LOG_FILE" > flyway_error.log
            else
              echo "El archivo de log no existe: $LOG_FILE" > flyway_error.log
              flyway -url="$FLYWAY_URL" -user="$FLYWAY_USER" -password="$FLYWAY_PASSWORD" info >> flyway_error.log
            fi
            exit $EXIT_CODE
          fi

      - name: Create GitHub Issue on Failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extracción mejorada de metadatos
          SERVER=$(echo "$FLYWAY_URL" | grep -oP '//\K[^;]+' | cut -d'.' -f1)
          DATABASE=$(echo "$FLYWAY_URL" | grep -oP 'databaseName=\K[^;]+')
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT_LINK="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          WORKFLOW_LINK="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Detección precisa del error
          if grep -q "No locations configured" flyway_error.log; then
            FAILED_SCRIPT="flyway.toml (configuración)"
            ERROR_SECTION="**Tipo de Error:** ⚠️ Error de Configuración\n**Archivo:** \`flyway.toml\`"
          else
            FAILED_SCRIPT=$(grep -oE '\b(V|R)__[^\.]+\.sql\b' flyway_error.log | tail -n1 || echo "No identificado")
            ERROR_SECTION="**Tipo de Error:** 🚨 Error de Migración\n**Script Fallido:** \`$FAILED_SCRIPT\`"
          fi

          # Validación de valores
          [ -z "$SERVER" ] && SERVER="servidor-no-detectado"
          [ -z "$DATABASE" ] && DATABASE="base-datos-no-detectada"
          [ -z "$FAILED_SCRIPT" ] && FAILED_SCRIPT="error-$(date +%s)"

          # Construcción del cuerpo según template
          ISSUE_BODY=$(cat <<EOF
          ## Flyway Migration Error Report

          ### Detalles Técnicos
          ${ERROR_SECTION}
          - **Entorno:** \`${{ github.ref_name }}\`
          - **Servidor:** \`${SERVER}.database.windows.net\`
          - **Base de Datos:** \`${DATABASE}\`
          - **Commit:** [\`${GITHUB_SHA:0:7}\`]($COMMIT_LINK)
          - **Workflow:** [\`${{ github.workflow }}\`]($WORKFLOW_LINK)
          - **Fecha/Hora:** \`$TIMESTAMP\`
          - **Ejecutado por:** \`${{ github.actor }}\`

          ### Mensaje de Error
          \`\`\`
          $(tail -n 30 flyway_error.log)
          \`\`\`

          ### Información Adicional
          **Configuración usada:**
          - URL: \`${FLYWAY_URL}\`
          - Usuario: \`${FLYWAY_USER}\`
          EOF
          )

          # Creación del issue
          gh issue create \
            --title "[${SERVER^^}] Flyway Error - ${FAILED_SCRIPT##*/}" \
            --body "$ISSUE_BODY" \
            --assignee "Edward-Arroyave" \
            --label "flyway,bug,migration-error" \
            --label "env:${{ github.ref_name }}"
