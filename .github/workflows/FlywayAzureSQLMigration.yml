name: Flyway Azure SQL Migrations

on:
  push:
    branches: [main, test, demo, dev]
  workflow_dispatch:

concurrency:
  group: flyway-migrations-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-migrations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Flyway
        run: |
          FLYWAY_VERSION=11.3.2
          curl -sL https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/$FLYWAY_VERSION/flyway-commandline-$FLYWAY_VERSION-linux-x64.tar.gz -o flyway.tar.gz
          tar -xzf flyway.tar.gz
          echo "$(pwd)/flyway-$FLYWAY_VERSION" >> $GITHUB_PATH
      - name: Set Environment Variables
        run: |
          case "${{ github.ref_name }}" in
            "main")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_PROD }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_PROD }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_PROD }}" >> $GITHUB_ENV
              ;;
            "dev")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_DEV }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_DEV }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_DEV }}" >> $GITHUB_ENV
              ;;
            "demo")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_DEMO }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_DEMO }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_DEMO }}" >> $GITHUB_ENV
              ;;
            "test")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_TEST }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_TEST }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_TEST }}" >> $GITHUB_ENV
              ;;
            *)
              echo "::error::Branch no configurada: ${{ github.ref_name }}"
              exit 1
              ;;
          esac
      - name: Run Migrations
        run: |
          LOG_FILE="./Live_Lis_Flyway/flyway_$(date +%Y%m%d%H%M%S).log"
          
          # Ejecutar migraci√≥n Flyway y crear un archivo de log
          flyway migrate \
            -configFiles=./Live_Lis_Flyway/flyway.toml \
            -url="$FLYWAY_URL" \
            -user="$FLYWAY_USER" \
            -password="$FLYWAY_PASSWORD" \
            -X \
            -locations="filesystem:./Live_Lis_Flyway/migrations" \
            -logFile="$LOG_FILE" || EXIT_CODE=$?
          # Verificar si la migraci√≥n fue exitosa
          if [ -n "$EXIT_CODE" ]; then
            echo "::error::Error en migraci√≥n (C√≥digo: $EXIT_CODE)"
            
            # Verificar si el archivo de log existe
            if [ -f "$LOG_FILE" ]; then
              tail -n 30 "$LOG_FILE" > flyway_error.log
            else
              # En caso de que no exista el archivo de log, capturamos el √∫ltimo mensaje de error
              echo "::error::El archivo de log no existe: $LOG_FILE"
              echo "√öltimo error: $(flyway -url="$FLYWAY_URL" -user="$FLYWAY_USER" -password="$FLYWAY_PASSWORD" info)" > flyway_error.log
            fi
            exit $EXIT_CODE
          fi
      - name: Create GitHub Issue on Failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extracci√≥n robusta de metadatos
          SERVER=$(echo "$FLYWAY_URL" | awk -F'//' '{split($2,a,";"); print a[1]}' | cut -d'.' -f1)
          DATABASE=$(echo "$FLYWAY_URL" | awk -F'databaseName=' '{print $2}' | cut -d';' -f1)
          
          # Detecci√≥n precisa del error
          if grep -q "No locations configured" flyway_error.log; then
            FAILED_SCRIPT="Configuraci√≥n de Flyway (flyway.toml)"
            ERROR_TYPE="‚ö†Ô∏è Error de Configuraci√≥n"
            ACTION="Verificar 'locations' en flyway.toml"
            LOG_LINK="https://github.com/${{ github.repository }}/blob/${{ github.sha }}/Live_Lis_Flyway/flyway.toml"
          else
            FAILED_SCRIPT=$(grep -oE '\b(V|R)__[A-Za-z0-9_]+\.sql\b' flyway_error.log | tail -n1 || echo "Archivo no identificado")
            ERROR_TYPE="üö® Error de Migraci√≥n"
            ACTION="Revisar script: [${FAILED_SCRIPT}](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/Live_Lis_Flyway/migrations/${FAILED_SCRIPT})"
            LOG_LINK=""
          fi
      
          # Valores por defecto garantizados
          [ -z "$SERVER" ] && SERVER="extracci√≥n-fallida"
          [ -z "$DATABASE" ] && DATABASE="base-de-datos-no-detectada"
          [ -z "$FAILED_SCRIPT" ] && FAILED_SCRIPT="error-desconocido-$(date +%s)"
      
          # Construcci√≥n del cuerpo del issue
          BODY="## ${ERROR_TYPE} en ${DATABASE}
          
          **Detalles T√©cnicos:**
          ‚ñ∏ Entorno: \`${{ github.ref_name }}\`
          ‚ñ∏ Servidor SQL: \`${SERVER}.database.windows.net\`
          ‚ñ∏ Recurso Fallido: \`${FAILED_SCRIPT}\`
          ‚ñ∏ Commit: [\`${GITHUB_SHA:0:7}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})

         
      
          # Crear issue con datos t√©cnicos reales
          gh issue create \
            --title "[${SERVER^^}] ${ERROR_TYPE} - ${FAILED_SCRIPT##*/}" \
            --body "$BODY" \
            --assignee "${{ github.actor }}" \
            --label "error-db,urgente"
