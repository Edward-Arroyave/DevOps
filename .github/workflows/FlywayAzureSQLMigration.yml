name: Flyway Azure SQL Migrations

on:
  push:
    branches: [main, test, demo, dev]
  workflow_dispatch:

concurrency:
  group: flyway-migrations-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-migrations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Flyway
        run: |
          FLYWAY_VERSION=11.3.2
          curl -sL https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/$FLYWAY_VERSION/flyway-commandline-$FLYWAY_VERSION-linux-x64.tar.gz -o flyway.tar.gz
          tar -xzf flyway.tar.gz
          echo "$(pwd)/flyway-$FLYWAY_VERSION" >> $GITHUB_PATH

      - name: Set Environment Variables
        run: |
          case "${{ github.ref_name }}" in
            "main")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_PROD }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_PROD }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_PROD }}" >> $GITHUB_ENV
              ;;
            "dev")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_DEV }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_DEV }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_DEV }}" >> $GITHUB_ENV
              ;;
            "demo")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_DEMO }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_DEMO }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_DEMO }}" >> $GITHUB_ENV
              ;;
            "test")
              echo "FLYWAY_URL=${{ secrets.FLYWAY_URL_TEST }}" >> $GITHUB_ENV
              echo "FLYWAY_USER=${{ secrets.FLYWAY_USER_TEST }}" >> $GITHUB_ENV
              echo "FLYWAY_PASSWORD=${{ secrets.FLYWAY_PASSWORD_TEST }}" >> $GITHUB_ENV
              ;;
            *)
              echo "::error::Branch no configurada: ${{ github.ref_name }}"
              exit 1
              ;;
          esac

      - name: Run Migrations
        run: |
          LOG_FILE="./Live_Lis_Flyway/flyway_$(date +%Y%m%d%H%M%S).log"
          EXIT_CODE=0
          
          flyway migrate \
            -configFiles=./Live_Lis_Flyway/flyway.toml \
            -url="$FLYWAY_URL" \
            -user="$FLYWAY_USER" \
            -password="$FLYWAY_PASSWORD" \
            -X \
            -locations="filesystem:./Live_Lis_Flyway/migrations" \
            -logFile="$LOG_FILE" || EXIT_CODE=$?

          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Error en migración (Código: $EXIT_CODE)"
            if [ -f "$LOG_FILE" ]; then
              tail -n 30 "$LOG_FILE" > flyway_error.log
            else
              echo "El archivo de log no existe: $LOG_FILE" > flyway_error.log
              flyway -url="$FLYWAY_URL" -user="$FLYWAY_USER" -password="$FLYWAY_PASSWORD" info >> flyway_error.log
            fi
            exit $EXIT_CODE
          fi

      - name: Create GitHub Issue on Failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extracción de metadatos
          SERVER=$(echo "$FLYWAY_URL" | awk -F'//' '{split($2,a,";"); print a[1]}' | cut -d'.' -f1)
          DATABASE=$(echo "$FLYWAY_URL" | awk -F'databaseName=' '{print $2}' | cut -d';' -f1)
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Procesar error
          if grep -q "No locations configured" flyway_error.log; then
            FAILED_SCRIPT="Configuración de Flyway (flyway.toml)"
            ERROR_TYPE="⚠️ Error de Configuración"
          else
            FAILED_SCRIPT=$(grep -oE '\b(V|R)__[A-Za-z0-9_]+\.sql\b' flyway_error.log | tail -n1 || echo "Archivo no identificado")
            ERROR_TYPE="🚨 Error de Migración"
          fi

          # Valores por defecto
          [ -z "$SERVER" ] && SERVER="servidor-desconocido"
          [ -z "$DATABASE" ] && DATABASE="base-de-datos-no-detectada"
          [ -z "$FAILED_SCRIPT" ] && FAILED_SCRIPT="error-$(date +%s)"

          # Generar contenido para el template
          ERROR_MSG=$(jq -Rs . < flyway_error.log)
          LOGS_CONTENT=$(tail -n 30 flyway_error.log | jq -Rs .)

          # Crear issue usando template
          gh issue create \
            --title "[${SERVER^^}] Flyway Migration Error - ${FAILED_SCRIPT##*/}" \
            --body-file .github/ISSUE_TEMPLATE/flyway-error.yml \
            --assignee "${{ github.actor }}" \
            --label "flyway,bug,migration-error" \
            -f migration_file="$FAILED_SCRIPT" \
            -f error_message="$ERROR_MSG" \
            -f event_trigger="flyway migrate" \
            -f commit_hash="${GITHUB_SHA:0:7}" \
            -f timestamp="$TIMESTAMP" \
            -f git_actor="${{ github.actor }}" \
            -f logs="$LOGS_CONTENT" \
            -f additional_info="**Entorno:** \`${{ github.ref_name }}\`
            **Servidor SQL:** \`${SERVER}.database.windows.net\`
            **Base de Datos:** \`${DATABASE}\`
            **Workflow:** [\`${{ github.workflow }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
